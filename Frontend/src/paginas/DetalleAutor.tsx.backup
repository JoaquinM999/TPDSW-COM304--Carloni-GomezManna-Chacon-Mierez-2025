import { useState, useEffect } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { motion } from 'framer-motion';
import { 
  ArrowLeft, 
  BookOpen, 
  Star, 
  MessageCircle,
  UserCircle 
} from 'lucide-react';

interface AutorDetalle {
  id: number;
  nombre: string;
  apellido: string;
  foto?: string;
  createdAt: string;
  updatedAt?: string;
}

interface LibroPopular {
  id: number;
  nombre: string;
  imagen?: string;
  totalResenas: number;
}

interface EstadisticasAutor {
  autorId: number;
  nombreCompleto: string;
  estadisticas: {
    totalLibros: number;
    totalResenas: number;
    promedioCalificacion: number;
    librosMasPopulares: LibroPopular[];
  };
}

interface Libro {
  id: number;
  nombre: string;
  imagen?: string;
  descripcion?: string;
  isbn?: string;
  idioma?: string;
  fecha_publicacion?: string;
}

const DetalleAutor = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  
  const [autor, setAutor] = useState<AutorDetalle | null>(null);
  const [estadisticas, setEstadisticas] = useState<EstadisticasAutor | null>(null);
  const [libros, setLibros] = useState<Libro[]>([]);
  const [biografia, setBiografia] = useState<string>('');
  const [loading, setLoading] = useState(true);
  const [loadingBio, setLoadingBio] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    if (id) {
      fetchAutorData();
    }
  }, [id]);

  const fetchAutorData = async () => {
    try {
      setLoading(true);
      
      // Fetch autor básico
      const autorRes = await fetch(`http://localhost:3000/api/autor/${id}`);
      if (!autorRes.ok) throw new Error('Autor no encontrado');
      const autorData = await autorRes.json();
      setAutor(autorData);

      // Fetch estadísticas
      const statsRes = await fetch(`http://localhost:3000/api/autor/${id}/stats`);
      if (statsRes.ok) {
        const statsData = await statsRes.json();
        setEstadisticas(statsData);
      }

      // Fetch libros del autor
      const librosRes = await fetch(`http://localhost:3000/api/libro?autor=${id}`);
      if (librosRes.ok) {
        const librosData = await librosRes.json();
        setLibros(librosData.libros || librosData);
      }

      // Fetch biografía de Wikipedia
      fetchBiografia(`${autorData.nombre} ${autorData.apellido}`);
      
      setLoading(false);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Error al cargar autor');
      setLoading(false);
    }
  };

  const fetchBiografia = async (nombreCompleto: string) => {
    try {
      setLoadingBio(true);
      
      // Verificar cache (24h)
      const cacheKey = `bio_${id}`;
      const cached = localStorage.getItem(cacheKey);
      if (cached) {
        const { bio, timestamp } = JSON.parse(cached);
        const age = Date.now() - timestamp;
        if (age < 24 * 60 * 60 * 1000) { // 24 horas
          setBiografia(bio);
          setLoadingBio(false);
          return;
        }
      }

      // Llamar a Wikipedia API
      const response = await fetch(
        `https://es.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(nombreCompleto)}`
      );

      if (response.ok) {
        const data = await response.json();
        const bio = data.extract || 'No se encontró biografía disponible.';
        setBiografia(bio);
        
        // Guardar en cache
        localStorage.setItem(cacheKey, JSON.stringify({
          bio,
          timestamp: Date.now()
        }));
      } else {
        setBiografia('No se encontró biografía disponible en Wikipedia.');
      }
    } catch (err) {
      console.error('Error fetching biografía:', err);
      setBiografia('No se pudo cargar la biografía.');
    } finally {
      setLoadingBio(false);
    }
  };

  const renderStars = (rating: number) => {
    const stars = [];
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 >= 0.5;

    for (let i = 0; i < 5; i++) {
      if (i < fullStars) {
        stars.push(
          <Star key={i} className="w-5 h-5 text-yellow-400 fill-yellow-400" />
        );
      } else if (i === fullStars && hasHalfStar) {
        stars.push(
          <div key={i} className="relative w-5 h-5">
            <Star className="absolute w-5 h-5 text-yellow-400" />
            <div className="absolute overflow-hidden w-1/2">
              <Star className="w-5 h-5 text-yellow-400 fill-yellow-400" />
            </div>
          </div>
        );
      } else {
        stars.push(
          <Star key={i} className="w-5 h-5 text-gray-300" />
        );
      }
    }
    return stars;
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-blue-50 flex items-center justify-center">
        <motion.div
          animate={{ rotate: 360 }}
          transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
          className="w-16 h-16 border-4 border-purple-500 border-t-transparent rounded-full"
        />
      </div>
    );
  }

  if (error || !autor) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-blue-50 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-red-600 mb-4">{error || 'Autor no encontrado'}</h2>
          <button
            onClick={() => navigate('/autores')}
            className="px-6 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700"
          >
            Volver a Autores
          </button>
        </div>
      </div>
    );
  }

  const nombreCompleto = `${autor.nombre} ${autor.apellido}`;

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-blue-50 py-8 px-4">
      <div className="max-w-7xl mx-auto">
        {/* Header con botón volver */}
        <motion.button
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          onClick={() => navigate('/autores')}
          className="flex items-center gap-2 text-purple-600 hover:text-purple-800 mb-6 group"
        >
          <ArrowLeft className="w-5 h-5 group-hover:-translate-x-1 transition-transform" />
          <span className="font-medium">Volver a Autores</span>
        </motion.button>

        {/* Sección principal: Foto y Info */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-white rounded-2xl shadow-xl overflow-hidden mb-8"
        >
          <div className="md:flex">
            {/* Foto del autor */}
            <div className="md:w-1/3 bg-gradient-to-br from-purple-100 to-pink-100 flex items-center justify-center p-12">
              {autor.foto ? (
                <img
                  src={autor.foto}
                  alt={nombreCompleto}
                  className="w-64 h-64 rounded-full object-cover shadow-2xl border-8 border-white"
                />
              ) : (
                <UserCircle className="w-64 h-64 text-purple-300" />
              )}
            </div>

            {/* Información básica */}
            <div className="md:w-2/3 p-8">
              <motion.h1
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.2 }}
                className="text-4xl font-bold text-gray-800 mb-4"
              >
                {nombreCompleto}
              </motion.h1>

              {/* Estadísticas */}
              {estadisticas && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: 0.3 }}
                  className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6"
                >
                  {/* Total Libros */}
                  <div className="bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl p-6 shadow-md">
                    <div className="flex items-center justify-between mb-2">
                      <BookOpen className="w-8 h-8 text-blue-600" />
                      <span className="text-3xl font-bold text-blue-600">
                        {estadisticas.estadisticas.totalLibros}
                      </span>
                    </div>
                    <p className="text-sm text-gray-600 font-medium">Libros Publicados</p>
                  </div>

                  {/* Promedio Calificación */}
                  <div className="bg-gradient-to-br from-yellow-50 to-yellow-100 rounded-xl p-6 shadow-md">
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex">
                        {renderStars(estadisticas.estadisticas.promedioCalificacion)}
                      </div>
                      <span className="text-3xl font-bold text-yellow-600">
                        {estadisticas.estadisticas.promedioCalificacion.toFixed(1)}
                      </span>
                    </div>
                    <p className="text-sm text-gray-600 font-medium">Calificación Promedio</p>
                  </div>

                  {/* Total Reseñas */}
                  <div className="bg-gradient-to-br from-purple-50 to-purple-100 rounded-xl p-6 shadow-md">
                    <div className="flex items-center justify-between mb-2">
                      <MessageCircle className="w-8 h-8 text-purple-600" />
                      <span className="text-3xl font-bold text-purple-600">
                        {estadisticas.estadisticas.totalResenas}
                      </span>
                    </div>
                    <p className="text-sm text-gray-600 font-medium">Reseñas Totales</p>
                  </div>
                </motion.div>
              )}

              {/* Biografía */}
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.4 }}
                className="bg-gray-50 rounded-xl p-6"
              >
                <h2 className="text-xl font-bold text-gray-800 mb-3 flex items-center gap-2">
                  <BookOpen className="w-6 h-6 text-purple-600" />
                  Biografía
                </h2>
                {loadingBio ? (
                  <div className="flex items-center gap-2 text-gray-500">
                    <motion.div
                      animate={{ rotate: 360 }}
                      transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                      className="w-5 h-5 border-2 border-purple-500 border-t-transparent rounded-full"
                    />
                    <span>Cargando biografía...</span>
                  </div>
                ) : (
                  <p className="text-gray-700 leading-relaxed">{biografia}</p>
                )}
              </motion.div>
            </div>
          </div>
        </motion.div>

        {/* Libros más populares */}
        {estadisticas && estadisticas.estadisticas.librosMasPopulares.length > 0 && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.5 }}
            className="bg-white rounded-2xl shadow-xl p-8 mb-8"
          >
            <h2 className="text-2xl font-bold text-gray-800 mb-6 flex items-center gap-2">
              <Star className="w-7 h-7 text-yellow-500" />
              Libros Más Populares
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-6">
              {estadisticas.estadisticas.librosMasPopulares.map((libro, index) => (
                <motion.div
                  key={libro.id}
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ delay: 0.6 + index * 0.1 }}
                  whileHover={{ scale: 1.05 }}
                  className="group cursor-pointer"
                >
                  <Link to={`/libros/${libro.id}`}>
                    <div className="bg-gradient-to-br from-purple-50 to-pink-50 rounded-xl overflow-hidden shadow-md group-hover:shadow-xl transition-all">
                      {libro.imagen ? (
                        <img
                          src={libro.imagen}
                          alt={libro.nombre}
                          className="w-full h-64 object-cover"
                          loading="lazy"
                        />
                      ) : (
                        <div className="w-full h-64 flex items-center justify-center bg-gradient-to-br from-purple-200 to-pink-200">
                          <BookOpen className="w-20 h-20 text-purple-400" />
                        </div>
                      )}
                      <div className="p-4">
                        <h3 className="font-bold text-gray-800 mb-2 line-clamp-2 group-hover:text-purple-600 transition-colors">
                          {libro.nombre}
                        </h3>
                        <div className="flex items-center gap-2 text-sm text-gray-600">
                          <MessageCircle className="w-4 h-4" />
                          <span>{libro.totalResenas} reseñas</span>
                        </div>
                      </div>
                    </div>
                  </Link>
                </motion.div>
              ))}
            </div>
          </motion.div>
        )}

        {/* Todos los libros del autor */}
        {libros.length > 0 && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.7 }}
            className="bg-white rounded-2xl shadow-xl p-8"
          >
            <h2 className="text-2xl font-bold text-gray-800 mb-6 flex items-center gap-2">
              <BookOpen className="w-7 h-7 text-purple-600" />
              Todos los Libros ({libros.length})
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
              {libros.map((libro, index) => (
                <motion.div
                  key={libro.id}
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ delay: 0.8 + index * 0.05 }}
                  whileHover={{ scale: 1.05 }}
                  className="group cursor-pointer"
                >
                  <Link to={`/libros/${libro.id}`}>
                    <div className="bg-gradient-to-br from-blue-50 to-purple-50 rounded-xl overflow-hidden shadow-md group-hover:shadow-xl transition-all">
                      {libro.imagen ? (
                        <img
                          src={libro.imagen}
                          alt={libro.nombre}
                          className="w-full h-64 object-cover"
                          loading="lazy"
                        />
                      ) : (
                        <div className="w-full h-64 flex items-center justify-center bg-gradient-to-br from-blue-200 to-purple-200">
                          <BookOpen className="w-20 h-20 text-blue-400" />
                        </div>
                      )}
                      <div className="p-4">
                        <h3 className="font-bold text-gray-800 mb-1 line-clamp-2 group-hover:text-purple-600 transition-colors">
                          {libro.nombre}
                        </h3>
                        {libro.fecha_publicacion && (
                          <p className="text-xs text-gray-500">
                            {new Date(libro.fecha_publicacion).getFullYear()}
                          </p>
                        )}
                      </div>
                    </div>
                  </Link>
                </motion.div>
              ))}
            </div>
          </motion.div>
        )}

        {/* Sin libros */}
        {libros.length === 0 && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="bg-white rounded-2xl shadow-xl p-12 text-center"
          >
            <BookOpen className="w-20 h-20 text-gray-300 mx-auto mb-4" />
            <p className="text-xl text-gray-600">
              Este autor aún no tiene libros registrados en la base de datos.
            </p>
          </motion.div>
        )}
      </div>
    </div>
  );
};

export default DetalleAutor;
