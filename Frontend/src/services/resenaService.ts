// src/services/resenaService.ts
import { fetchWithRefresh } from '../utils/fetchWithRefresh';

const API_URL = 'http://localhost:3000/api/resena';

/**
 * üîπ Obtiene rese√±as de un libro.
 * Acepta tanto el ID interno como el externalId (Google Books, por ejemplo).
 * Devuelve todas las rese√±as excepto las rechazadas (seg√∫n la l√≥gica del backend).
 */
export const obtenerRese√±as = async (idLibro: string) => {
  const response = await fetchWithRefresh(`${API_URL}?libroId=${encodeURIComponent(idLibro)}`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      'Cache-Control': 'no-cache',
    },
  });

  if (!response.ok) {
    const error = await response.text();
    console.error('‚ùå Error al obtener rese√±as:', error);
    throw new Error('Error al obtener rese√±as');
  }

  return response.json();
};

/**
 * üîπ Agrega una nueva rese√±a.
 * Si el libro no existe en la BD, el backend lo crea autom√°ticamente.
 * Invalida la cach√© en Redis (si est√° activo) para mostrar los cambios instant√°neamente.
 */
export const agregarRese√±a = async (
  libroId: string,
  comentario: string,
  estrellas: number,
  libro: any
) => {
  const response = await fetchWithRefresh(API_URL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ libroId, comentario, estrellas, libro }),
  });

  if (!response.ok) {
    const data = await response.json().catch(() => ({}));
    throw new Error(data.error || 'Error al agregar rese√±a');
  }

  return response.json();
};

/**
 * üîπ Obtiene todas las rese√±as pendientes (solo admin).
 */
export const obtenerResenasPendientes = async (token: string) => {
  const response = await fetch(`${API_URL}?estado=PENDING`, {
    headers: {
      Authorization: `Bearer ${token}`,
      'Cache-Control': 'no-cache',
    },
  });

  if (!response.ok) {
    const error = new Error('Error al obtener rese√±as pendientes');
    (error as any).status = response.status;
    throw error;
  }

  return response.json();
};

/**
 * üîπ Aprueba una rese√±a (solo admin).
 */
export const aprobarResena = async (id: number, token: string) => {
  const response = await fetch(`${API_URL}/${id}/approve`, {
    method: 'PUT',
    headers: {
      Authorization: `Bearer ${token}`,
    },
  });

  if (!response.ok) throw new Error('Error al aprobar rese√±a');
  return response.json();
};

/**
 * üîπ Rechaza una rese√±a (solo admin).
 */
export const rechazarResena = async (id: number, token: string) => {
  const response = await fetch(`${API_URL}/${id}/reject`, {
    method: 'PUT',
    headers: {
      Authorization: `Bearer ${token}`,
    },
  });

  if (!response.ok) throw new Error('Error al rechazar rese√±a');
  return response.json();
};

/**
 * üîπ Obtiene rese√±as de un usuario.
 */
export const getResenasByUsuario = async (userId: number) => {
  const response = await fetchWithRefresh(`${API_URL}?usuarioId=${userId}`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      'Cache-Control': 'no-cache',
    },
  });

  if (!response.ok) throw new Error('Error al obtener rese√±as del usuario');
  return response.json();
};

/**
 * üîπ Obtiene rese√±as de un libro (mismo prop√≥sito que obtenerRese√±as, pero separado por compatibilidad).
 */
export const getResenasByLibro = async (libroId: string) => {
  const response = await fetchWithRefresh(`${API_URL}?libroId=${encodeURIComponent(libroId)}`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      'Cache-Control': 'no-cache',
    },
  });

  if (!response.ok) throw new Error('Error al obtener rese√±as del libro');
  return response.json();
};
