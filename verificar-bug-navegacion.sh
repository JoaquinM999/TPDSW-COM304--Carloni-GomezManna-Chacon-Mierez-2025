#!/bin/bash

echo "üîç VERIFICACI√ìN DEL ESTADO DEL BUG DE NAVEGACI√ìN"
echo "================================================"
echo ""

# 1. Verificar que el c√≥digo est√° en el repositorio
echo "1Ô∏è‚É£ Verificando c√≥digo en archivos..."
if grep -q "getLibroBySlug" Backend/src/controllers/libro.controller.ts; then
  echo "   ‚úÖ C√≥digo de getLibroBySlug encontrado en libro.controller.ts"
else
  echo "   ‚ùå C√≥digo de getLibroBySlug NO encontrado"
fi

if grep -q "slug/:slug" Backend/src/routes/libro.routes.ts; then
  echo "   ‚úÖ Ruta /slug/:slug encontrada en libro.routes.ts"
else
  echo "   ‚ùå Ruta /slug/:slug NO encontrada"
fi

echo ""

# 2. Verificar si el backend est√° corriendo
echo "2Ô∏è‚É£ Verificando si backend est√° corriendo..."
if lsof -ti:3000 >/dev/null 2>&1; then
  echo "   ‚úÖ Backend corriendo en puerto 3000 (PID: $(lsof -ti:3000))"
else
  echo "   ‚ùå Backend NO est√° corriendo en puerto 3000"
  echo "   üí° Inicia el backend con: cd Backend && npm run dev"
  exit 1
fi

echo ""

# 3. Probar el endpoint
echo "3Ô∏è‚É£ Probando endpoint GET /api/libros/slug/1984..."
response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/libros/slug/1984)

if [ "$response" = "200" ]; then
  echo "   ‚úÖ Endpoint funciona correctamente (200 OK)"
  echo ""
  echo "4Ô∏è‚É£ Datos del libro:"
  curl -s http://localhost:3000/api/libros/slug/1984 | jq '{id, titulo, autores, tiene_imagen: (.imagen != null), tiene_descripcion: (.descripcion != null)}'
else
  echo "   ‚ùå Endpoint NO funciona (HTTP $response)"
  echo ""
  echo "   üö® PROBLEMA DETECTADO:"
  echo "   El c√≥digo est√° en los archivos pero el endpoint no responde."
  echo "   Esto significa que el backend NO se ha reiniciado."
  echo ""
  echo "   üîß SOLUCI√ìN:"
  echo "   1. Ve a la terminal donde corre el backend"
  echo "   2. Presiona Ctrl+C para detenerlo"
  echo "   3. Ejecuta: npm run dev"
  echo "   4. Vuelve a ejecutar este script para verificar"
fi

echo ""
echo "================================================"
